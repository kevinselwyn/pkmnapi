use rocket::http::{Accept, ContentType, Status};

mod common;

#[test]
fn get_trainer_pic_png_200() {
    let (client, access_token) = common::setup_with_access_token();

    common::post_rom(&client, &access_token);

    let request = client
        .get("/v1/trainer/pics/0")
        .header(common::auth_header(&access_token));

    let mut response = request.dispatch();

    assert_eq!(response.status(), Status::Ok);
    assert_eq!(response.content_type(), Some(ContentType::PNG));
    assert_eq!(
        response.body_bytes(),
        Some(vec![
            0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48,
            0x44, 0x52, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x8D, 0xED, 0x64, 0xC2, 0x00, 0x00, 0x01, 0xBF, 0x49, 0x44, 0x41, 0x54, 0x78,
            0x9C, 0xED, 0x95, 0x6D, 0x72, 0xC3, 0x20, 0x0C, 0x44, 0xCD, 0x21, 0xE1, 0x90, 0xE6,
            0x90, 0xE9, 0x5B, 0x68, 0x3D, 0xB1, 0xFD, 0x48, 0x9B, 0xFE, 0xEC, 0x74, 0x27, 0xE2,
            0x63, 0xA5, 0x8D, 0x0C, 0x08, 0xBB, 0x3C, 0xB6, 0xDF, 0xE1, 0x5F, 0xF8, 0x02, 0x7F,
            0x44, 0xD8, 0xFA, 0xB6, 0xF6, 0x2E, 0x85, 0x53, 0x55, 0xEA, 0xCE, 0xD8, 0xE0, 0x42,
            0x54, 0x08, 0x2A, 0xA3, 0x45, 0x80, 0xF3, 0xAD, 0xA3, 0x0A, 0x50, 0xB6, 0xBE, 0xC8,
            0x29, 0xC2, 0xF2, 0x14, 0x99, 0xBF, 0x68, 0xD8, 0x1D, 0xDF, 0x08, 0x1B, 0x6E, 0x09,
            0x01, 0xC2, 0x7E, 0x09, 0xDB, 0xB6, 0xED, 0x6F, 0x65, 0x6C, 0x2C, 0x8D, 0x16, 0x63,
            0x87, 0x7A, 0xAF, 0x7D, 0xB3, 0x65, 0x8A, 0x70, 0xA6, 0x44, 0x98, 0x6E, 0x22, 0x89,
            0x2F, 0x10, 0x61, 0x39, 0x14, 0x1D, 0x1B, 0xCD, 0x3D, 0x48, 0x84, 0x65, 0x1C, 0xC3,
            0x44, 0x7F, 0x64, 0x7A, 0x0B, 0x09, 0xEE, 0x42, 0xA8, 0x42, 0x6C, 0xF2, 0x36, 0xFA,
            0x4C, 0x69, 0x6F, 0x10, 0xB2, 0xED, 0x65, 0xAF, 0x38, 0xD8, 0x94, 0x78, 0xCB, 0x43,
            0xB7, 0x35, 0xAE, 0x2B, 0x08, 0x3D, 0x1E, 0xB6, 0xF2, 0x37, 0x12, 0x92, 0x20, 0x9A,
            0x2B, 0x66, 0xCD, 0xB5, 0xAD, 0x56, 0x92, 0xDA, 0x59, 0x00, 0x15, 0x42, 0xA3, 0x09,
            0x3A, 0xDB, 0xE3, 0x58, 0x08, 0x71, 0x20, 0x5D, 0xCB, 0xF0, 0xBB, 0x8B, 0x7D, 0xE5,
            0x1C, 0xD2, 0xB8, 0x9F, 0x08, 0x75, 0x90, 0xAE, 0x6D, 0x7B, 0x45, 0xD6, 0x56, 0x49,
            0x55, 0x48, 0xCD, 0xF5, 0xCA, 0xE6, 0xA0, 0xDB, 0x3D, 0x82, 0x18, 0xA3, 0x43, 0x8E,
            0x13, 0x59, 0xDF, 0x2A, 0xA7, 0x07, 0xC9, 0xEB, 0x63, 0x5C, 0x8B, 0x31, 0xB9, 0x43,
            0x69, 0xCE, 0x8E, 0xE5, 0xD1, 0x8F, 0x06, 0x13, 0x28, 0x5D, 0x46, 0x2A, 0x92, 0xD6,
            0xB6, 0xDC, 0xD7, 0x57, 0xC2, 0x94, 0x2C, 0x0F, 0x6C, 0x11, 0x38, 0x8D, 0x2E, 0x3B,
            0xBB, 0xD9, 0xA9, 0xBB, 0xD4, 0xBA, 0x46, 0x10, 0x63, 0x34, 0xC7, 0xC1, 0x31, 0x62,
            0xC9, 0xAC, 0x11, 0xC4, 0x08, 0x9D, 0x74, 0x74, 0xC8, 0x30, 0x8D, 0x00, 0x46, 0x23,
            0x8C, 0x72, 0xC8, 0x3C, 0x02, 0x18, 0x7D, 0xE6, 0xCE, 0xB3, 0x03, 0x46, 0x9F, 0xB9,
            0xF3, 0xEC, 0x80, 0xD1, 0xB9, 0x17, 0xD9, 0x96, 0x09, 0x8B, 0x00, 0x4A, 0x97, 0x2C,
            0x8F, 0x57, 0x0E, 0x0B, 0xA5, 0xD0, 0x31, 0xC1, 0x5A, 0xF8, 0x89, 0xB7, 0xAE, 0x55,
            0x58, 0x4A, 0x86, 0x7D, 0x5D, 0xBC, 0xA9, 0x80, 0x3B, 0x72, 0x20, 0xB3, 0x66, 0x32,
            0x52, 0xC4, 0x79, 0xC3, 0x88, 0x6E, 0xA9, 0xBB, 0x74, 0x34, 0x02, 0x15, 0x86, 0x8C,
            0x20, 0x96, 0xB1, 0x41, 0xF9, 0x90, 0xCF, 0x66, 0x30, 0x7E, 0xAC, 0x8E, 0x5F, 0x6C,
            0x8C, 0x0D, 0x46, 0xC3, 0x51, 0x03, 0x38, 0x46, 0xCB, 0xCC, 0x60, 0x34, 0x97, 0x7E,
            0x7E, 0x31, 0xF8, 0x88, 0xCC, 0x77, 0x88, 0x20, 0xFE, 0x0B, 0xA0, 0x72, 0x88, 0x38,
            0xE8, 0xA8, 0x3C, 0xE6, 0x02, 0x61, 0xE7, 0x39, 0xC4, 0xE2, 0x9C, 0xB3, 0x3B, 0xE2,
            0xBB, 0x00, 0xAA, 0x7D, 0x56, 0x1A, 0xB5, 0xF7, 0x46, 0x46, 0xD6, 0x98, 0xE7, 0x9C,
            0x78, 0x1E, 0x9F, 0x60, 0xC2, 0x1F, 0xE1, 0x03, 0xD1, 0x11, 0xEA, 0x01, 0xF6, 0xD4,
            0xA1, 0xB5, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,
        ])
    );

    common::teardown();
}

#[test]
fn get_trainer_pic_png_401() {
    let client = common::setup();

    let request = client.get("/v1/trainer/pics/0");

    let mut response = request.dispatch();

    common::assert_unauthorized(&mut response);
    common::teardown();
}

#[test]
fn get_trainer_pic_png_404() {
    let (client, access_token) = common::setup_with_access_token();

    common::post_rom(&client, &access_token);

    let request = client
        .get("/v1/trainer/pics/100")
        .header(common::auth_header(&access_token));

    let mut response = request.dispatch();

    assert_eq!(response.status(), Status::NotFound);
    assert_eq!(response.content_type(), Some(ContentType::JSON));
    assert_eq!(
        response.body_string(),
        Some(
            r#"{"data":{"id":"error_trainer_pics","type":"errors","attributes":{"message":"Invalid trainer ID: 100"}}}"#
                .to_string()
        )
    );

    common::teardown();
}

#[test]
fn get_trainer_pic_jpeg_200() {
    let (client, access_token) = common::setup_with_access_token();

    common::post_rom(&client, &access_token);

    let request = client
        .get("/v1/trainer/pics/0")
        .header(Accept::JPEG)
        .header(common::auth_header(&access_token));

    let mut response = request.dispatch();

    assert_eq!(response.status(), Status::Ok);
    assert_eq!(response.content_type(), Some(ContentType::JPEG));
    assert_eq!(
        response.body_bytes(),
        Some(vec![
            0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x02, 0x00,
            0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x00, 0x38, 0x00,
            0x38, 0x01, 0x01, 0x11, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x08, 0x06, 0x06, 0x07,
            0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C,
            0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A,
            0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37,
            0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32, 0x3C,
            0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
            0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10,
            0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00,
            0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
            0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42,
            0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16,
            0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55,
            0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73,
            0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
            0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5,
            0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA,
            0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
            0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA,
            0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x08,
            0x01, 0x01, 0x00, 0x00, 0x3F, 0x00, 0xF7, 0xFA, 0x28, 0xA2, 0x8A, 0x28, 0xA2, 0x8A,
            0xE2, 0xB5, 0xCF, 0x17, 0xEA, 0x09, 0xAA, 0x5E, 0xE9, 0x9A, 0x3C, 0x36, 0xD1, 0x49,
            0x65, 0x22, 0xC7, 0x35, 0xCD, 0xDA, 0xB4, 0x80, 0xB9, 0x44, 0x93, 0x6A, 0xC6, 0xAC,
            0xB9, 0x1B, 0x64, 0x1F, 0x31, 0x71, 0x82, 0x08, 0xDA, 0x47, 0x35, 0x87, 0x6D, 0xAF,
            0xC1, 0x25, 0xDB, 0x5B, 0x5D, 0x6B, 0xFA, 0x95, 0xC6, 0xBA, 0xB3, 0x22, 0xDB, 0x88,
            0x2E, 0x91, 0x3C, 0xB1, 0x23, 0x2A, 0xAA, 0xC9, 0x02, 0xAF, 0x97, 0xB3, 0x2E, 0x32,
            0xEF, 0x1B, 0xB0, 0x0F, 0x90, 0x72, 0x17, 0x1D, 0xEE, 0x85, 0x7F, 0x77, 0x79, 0x69,
            0x24, 0x3A, 0x8C, 0x70, 0xA6, 0xA5, 0x66, 0xEB, 0x05, 0xDF, 0xD9, 0xF7, 0x18, 0x5A,
            0x43, 0x1A, 0x39, 0x31, 0x96, 0x00, 0x95, 0xC3, 0x8E, 0xBD, 0x0E, 0x47, 0x38, 0xC9,
            0xD4, 0xA2, 0x8A, 0x2B, 0xC8, 0xB5, 0xBB, 0x6D, 0x66, 0xD7, 0xE2, 0x45, 0xC7, 0xF6,
            0x86, 0xA5, 0x67, 0x15, 0x8E, 0xA7, 0x26, 0xD8, 0x19, 0xAD, 0x98, 0x08, 0xE3, 0x8E,
            0x2D, 0xC9, 0xB5, 0x43, 0x7E, 0xF6, 0x46, 0x3E, 0x62, 0xB9, 0xCE, 0x54, 0x44, 0xA4,
            0xE0, 0x34, 0x69, 0x5C, 0xCF, 0x84, 0x7C, 0x35, 0x6D, 0x06, 0xB3, 0xA7, 0x69, 0xF1,
            0x2E, 0x97, 0x64, 0xD3, 0x96, 0x5D, 0x52, 0x0B, 0x49, 0x3C, 0xDB, 0x98, 0x15, 0xE3,
            0x25, 0x17, 0x74, 0x81, 0x89, 0x5D, 0xC2, 0x30, 0x47, 0x4C, 0xB7, 0x01, 0x87, 0xCC,
            0x3A, 0xEF, 0x84, 0xFE, 0x19, 0xFB, 0x35, 0xCD, 0xDE, 0xB4, 0xD7, 0x2B, 0x71, 0x1B,
            0x65, 0x2D, 0xA7, 0xB5, 0xB7, 0x8A, 0xDA, 0x19, 0xA3, 0xDC, 0xC1, 0x7E, 0x54, 0x5D,
            0xCE, 0x04, 0x62, 0x36, 0xE5, 0xD9, 0x41, 0x90, 0xA1, 0x50, 0xF1, 0x13, 0x5E, 0xAB,
            0x45, 0x14, 0x57, 0x1B, 0xE3, 0xCB, 0xA9, 0x67, 0x16, 0xBA, 0x0C, 0x77, 0x3A, 0x7D,
            0x9A, 0xDD, 0xC1, 0x35, 0xE4, 0xB7, 0x37, 0xE1, 0x19, 0x15, 0x2D, 0xDA, 0x26, 0x2A,
            0x04, 0x8A, 0xC8, 0x0F, 0xCE, 0x1B, 0x73, 0x06, 0xDA, 0x11, 0x8E, 0x33, 0x82, 0xBE,
            0x59, 0xA6, 0x69, 0xFA, 0x8D, 0xFF, 0x00, 0x89, 0x74, 0xED, 0x0E, 0xEB, 0x51, 0x97,
            0xC9, 0xBF, 0x8E, 0x73, 0x6A, 0xD3, 0x40, 0x64, 0x86, 0x41, 0xB4, 0x38, 0x64, 0x12,
            0xA3, 0x24, 0xA8, 0x8B, 0xB8, 0x65, 0xA4, 0xB8, 0xDD, 0xB9, 0x71, 0xB0, 0x9F, 0x31,
            0x3D, 0xC7, 0xC3, 0xFA, 0x94, 0xDA, 0xAE, 0x93, 0xE7, 0xDC, 0x2A, 0x09, 0xE3, 0xB8,
            0xB8, 0xB5, 0x90, 0xC6, 0x08, 0x57, 0x68, 0x66, 0x78, 0x8B, 0x80, 0x49, 0x2A, 0x18,
            0xA6, 0xED, 0xB9, 0x38, 0xCE, 0x32, 0x71, 0x93, 0xA9, 0x45, 0x14, 0x57, 0x07, 0xE2,
            0xEF, 0x0F, 0xB7, 0x89, 0xFC, 0x57, 0x68, 0xD6, 0x97, 0x02, 0x0D, 0x47, 0xC3, 0xF6,
            0xAB, 0x79, 0x6A, 0x59, 0x37, 0x06, 0x92, 0x69, 0x3E, 0x52, 0x79, 0x03, 0x03, 0xEC,
            0xCC, 0x08, 0xEF, 0xBF, 0xAA, 0x90, 0x0D, 0x11, 0xF8, 0x47, 0xC4, 0x3A, 0x9D, 0xD1,
            0xB9, 0xD6, 0x75, 0x9B, 0x77, 0xF3, 0x21, 0x11, 0x15, 0x6B, 0x30, 0xD2, 0x40, 0x73,
            0x9D, 0xF0, 0x10, 0xE1, 0x22, 0x60, 0xC1, 0x59, 0x58, 0xAB, 0xB6, 0x40, 0xC9, 0x3B,
            0x54, 0x0D, 0x4F, 0x87, 0xD6, 0x36, 0xFA, 0x67, 0x84, 0xC5, 0x85, 0x9C, 0x7E, 0x5D,
            0xAD, 0xAE, 0xA1, 0x7F, 0x0C, 0x29, 0xB8, 0x9D, 0xA8, 0xB7, 0x73, 0x05, 0x19, 0x3C,
            0x9C, 0x00, 0x3A, 0xD7, 0x51, 0x45, 0x14, 0x57, 0x05, 0xE3, 0x7F, 0x05, 0xE8, 0x9E,
            0x2F, 0xF1, 0x56, 0x87, 0x0D, 0xF2, 0x62, 0xE9, 0x60, 0xB8, 0x77, 0x65, 0x8D, 0x72,
            0xF6, 0xEB, 0xB0, 0x11, 0x92, 0xA7, 0xE6, 0x12, 0x49, 0x19, 0x19, 0xE3, 0x0D, 0x27,
            0x72, 0x2B, 0x92, 0xD1, 0xBC, 0x1D, 0xAF, 0xDE, 0x8F, 0x20, 0x78, 0xD2, 0xFA, 0x38,
            0x2E, 0x2C, 0xE5, 0xBA, 0xD2, 0x16, 0x0B, 0xC9, 0xE3, 0x59, 0x50, 0x31, 0x55, 0x27,
            0x12, 0x1D, 0xA8, 0x15, 0xAD, 0x9B, 0x00, 0x0E, 0x25, 0x2A, 0x00, 0x20, 0x9A, 0xF5,
            0x3F, 0x0B, 0x0B, 0x2F, 0xF8, 0x45, 0x74, 0xA7, 0xD3, 0xDA, 0x67, 0xB4, 0x96, 0xD6,
            0x39, 0xA3, 0x92, 0x7C, 0x79, 0xB2, 0xEF, 0x01, 0xCB, 0xC8, 0x47, 0x57, 0x62, 0xC5,
            0x98, 0xF7, 0x62, 0x4F, 0x7A, 0xD7, 0xA2, 0x8A, 0x2B, 0xCC, 0xFC, 0x59, 0x61, 0xA9,
            0x5E, 0x78, 0xA2, 0xEF, 0xEC, 0xF0, 0x6A, 0x42, 0xEE, 0x61, 0x0C, 0x76, 0xAD, 0x6B,
            0x68, 0xCC, 0x9E, 0x54, 0x4A, 0x64, 0x0F, 0xE7, 0x07, 0x8C, 0x46, 0xE5, 0xA4, 0xBA,
            0x88, 0x9F, 0x3E, 0x33, 0xB5, 0x82, 0xEC, 0x3B, 0x83, 0xD1, 0xAF, 0x78, 0x47, 0x52,
            0xB5, 0xD0, 0xBC, 0x2C, 0xB1, 0x87, 0xB9, 0x4D, 0x17, 0x4E, 0x36, 0x97, 0x89, 0x6D,
            0x1B, 0x4B, 0xE7, 0xA0, 0x58, 0x4B, 0x29, 0x88, 0x49, 0x1F, 0x98, 0x8C, 0x20, 0x2A,
            0x54, 0x96, 0xCE, 0xE0, 0x3C, 0xB6, 0xCE, 0x53, 0xA7, 0xF0, 0x3C, 0x57, 0x10, 0xE8,
            0x93, 0xC7, 0x28, 0xB9, 0x31, 0x1B, 0xB9, 0x25, 0x86, 0x4B, 0xB8, 0x8C, 0x52, 0xCB,
            0xE6, 0x62, 0x49, 0x19, 0x94, 0xAA, 0x11, 0xFB, 0xE7, 0x98, 0x0C, 0xC6, 0x9F, 0x28,
            0x5F, 0x97, 0x18, 0x63, 0xD2, 0xD1, 0x5F, 0xFF, 0xD9,
        ])
    );

    common::teardown();
}

#[test]
fn get_trainer_pic_jpeg_401() {
    let client = common::setup();

    let request = client.get("/v1/trainer/pics/0").header(Accept::JPEG);

    let mut response = request.dispatch();

    common::assert_unauthorized(&mut response);
    common::teardown();
}

#[test]
fn get_trainer_pic_jpeg_404() {
    let (client, access_token) = common::setup_with_access_token();

    common::post_rom(&client, &access_token);

    let request = client
        .get("/v1/trainer/pics/100")
        .header(Accept::JPEG)
        .header(common::auth_header(&access_token));

    let mut response = request.dispatch();

    assert_eq!(response.status(), Status::NotFound);
    assert_eq!(response.content_type(), Some(ContentType::JSON));
    assert_eq!(
        response.body_string(),
        Some(
            r#"{"data":{"id":"error_trainer_pics","type":"errors","attributes":{"message":"Invalid trainer ID: 100"}}}"#
                .to_string()
        )
    );

    common::teardown();
}
